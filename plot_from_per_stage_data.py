# -*- coding: utf-8 -*-
"""full_aoi_diagnosis_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sn_pgTS9ZPUOPs1Ev-AtI8_hHtOVllIu
"""

import numpy as np
#import pandas as pd
import matplotlib.pyplot as plt
import os.path
from os import path

#df_a2c = pd.read_csv("ed_5000_sn_4_mc_-100.0_s_Phh_0.999_s_Pff_1.0_s_Phsug_1.0_s_Pfsug_0.999_n_Phh_0.99_n_Phsud_0.0.txt", delim_whitespace=True, header=None)
#df_dqn = pd.read_csv("dqn_ed_5000_sn_2_mc_-100.0_s_Phh_0.999_s_Pff_1.0_s_Phsug_1.0_s_Pfsug_0.999_n_Phh_0.99_n_Phsud_0.0(2).txt", delim_whitespace=True, header=None)

def get_moving_average(np_input_array, window_size = 10):
	moving_average = np.zeros(len(np_input_array) - window_size)
	moving_average[0] = (np.sum(np_input_array[0:window_size])/window_size)
	j = 0
	for i in range(window_size, len(np_input_array)-1, 1):
		moving_average[j+1] = moving_average[j] + (np_input_array[i] - np_input_array[i-window_size])/window_size
		j += 1
	return moving_average


def get_episodes_total_reward(data_file, episode_duration, number_of_episodes):
	np_episode_total_reward = np.zeros(number_of_episodes)
	episode_reward = np.zeros(episode_duration)

	data = np.loadtxt(data_file)

	for i in range(number_of_episodes):
		begin = i*episode_duration
		end = begin + episode_duration
	#    lst_mean_rewards_a2c.append(df_a2c[begin:end][2].sum())
		episode_reward = data[begin:end, 2]
	    # print(episode_reward)
		np_episode_total_reward[i] = (np.sum(episode_reward))
		# print(np_episode_total_reward[i])

	return np_episode_total_reward

def get_episode_states_and_actions(data_file, episode_duration, number_of_episodes, requested_episode):
	episode_states = np.zeros(episode_duration)
	episode_actions = np.zeros(episode_duration)
	episode_rewards = np.zeros(episode_duration)

	data = np.loadtxt(data_file)
	begin = requested_episode*episode_duration
	end = begin + episode_duration

	episode_states = data[begin:end, 0]
	episode_actions = data[begin:end, 1]
	episode_rewards = data[begin:end, 2]

	return episode_states, episode_actions, episode_rewards


def main():
        dqn_data_file = 'dqn_attempt_2_sess_0_ed_5000_sn_4_mc_100.0_s_Phh_0.999_s_Pff_1.0_s_Phsug_1.0_s_Pfsug_0.999_n_Phh_0.99_n_Phsud_0.0.txt'
        a2c_data_file = 'a3c_nn_32_128_sess_0_ed_5000_sn_4_mc_100.0_s_Phh_0.999_s_Pff_1.0_s_Phsug_1.0_s_Pfsug_0.999_n_Phh_0.99_n_Phsud_0.0.txt'
        episode_duration = 5000
        number_of_episodes = 400 #1000
        
        if path.exists('dqn_total_reward_per_episode.txt'):
            dqn_total_reward_per_episode = np.loadtxt('dqn_total_reward_per_episode.txt')
        else:
            dqn_total_reward_per_episode = get_episodes_total_reward(dqn_data_file, episode_duration, number_of_episodes)
            np.savetxt('dqn_total_reward_per_episode.txt', dqn_total_reward_per_episode, delimiter=',')
            
        if path.exists('a2c_total_reward_per_episode.txt'):
            a2c_total_reward_per_episode = np.loadtxt('a2c_total_reward_per_episode.txt')	
        else:
            a2c_total_reward_per_episode = get_episodes_total_reward(a2c_data_file, episode_duration, number_of_episodes)
            np.savetxt('a2c_total_reward_per_episode.txt', a2c_total_reward_per_episode, delimiter=',')
        # x = np.linspace(1, number_of_episodes, number_of_episodes)
        fig = plt.figure()
        plt.plot(dqn_total_reward_per_episode, label='DQN')
        plt.plot(a2c_total_reward_per_episode, label='A2C') 
        plt.xlabel('Episode') 
        plt.ylabel("Episode's Total reward") #plt.title(')
        plt.legend()
        plt.savefig('Total_reward_vs_episode.pdf')
	# plt.show() 

        fig = plt.figure()
        window_size = 10
        dqn_moving_average = get_moving_average(dqn_total_reward_per_episode, window_size)
        a2c_moving_average = get_moving_average(a2c_total_reward_per_episode, window_size)
        x = np.arange(window_size, len(a2c_total_reward_per_episode), 1)
        plt.plot(x, dqn_moving_average, label='DQN') 
        plt.plot(x, a2c_moving_average, label='A2C')
        plt.xlabel('Episode')
        plt.ylabel("Episode total reward \n moving average")
        plt.legend()
        plt.savefig('moving_average.pdf')
	# data_file = 'ed_5000_sn_4_mc_-100.0_s_Phh_0.999_s_Pff_1.0_s_Phsug_1.0_s_Pfsug_0.999_n_Phh_0.99_n_Phsud_0.0.txt'
	# for e in range(150, 170, 2):
	# 	requested_episode = e
	# 	data_file_list = [dqn_data_file, a2c_data_file ]
	# 	for data_file in data_file_list:
	# 		episode_states, episode_actions, episode_rewards = get_episode_states_and_actions(data_file, episode_duration, number_of_episodes, requested_episode)
	# 		fig, (ax1, ax2, ax3) = plt.subplots(3,1)
	# 		print(str(data_file))
	# 		ax1.plot(episode_states)
	# 		ax2.plot(episode_actions)
	# 		ax3.plot(episode_rewards)
	# 		plt.show()

if __name__ == '__main__':
	main()

